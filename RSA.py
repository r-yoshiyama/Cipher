#!/usr/bin/env python
#coding:utf-8

"""
This is RSA's generate, encode and decode script writen in python.
author = Ryota Yoshiyama
Last Update = 27/10/17 16:04:13
"""


import random
import time

def check(a, s, d, n):
	x = pow(a, d, n)
	if x == 1:
		return True
	for i in range(s - 1):
		if x == n - 1:
			return True
		x = pow(x, 2, n)
	return x == n - 1

def isPrime(p):
	k = 30
	if p == 2:
		return True
	if not p & 1:
		return False
	s = 0
	d = p - 1
	while d % 2 == 0:
		d >>= 1
		s += 1
	for i in range(k):
		a = random.randint(2, p - 1)
		if not check(a, s, d, p):
			return False
	return True

def primeGene(N):
	p = 4
	l = 10
	b = random.randint(0, pow(2, N-l-1)-1)
	while not isPrime(p):
		a = random.randint(0, pow(2, l) - 1)
		p = pow(2, N - l) * a + 2 * b + 1
	return p

def ex_euclid(a,b):
    a0, x0, y0 = a, 1, 0
    a1, x1, y1 = b % a, 0, 1
    while a1 != 0:
        q = a0 // a1
        a0, x0, y0, a1, x1, y1 = a1, x1, y1, a0 - q * a1, x0 - q * x1, y0 - q * y1
    return y0 % a

def gen():
#	bit = 2048
#	bit = 2671
	bit = 3241
	print(bit)
	p, q = primeGene(bit), primeGene(bit)
	N = p * q
	e = 65537
	phi = (p - 1)*(q - 1)
	d = ex_euclid(phi, e)
#	f = open("text_rsa.txt", "a")
#	star = "*"*80
	text = "\nPublic key pair(N, e)\nN = {0}\n\ne = {1}\n\nSecret key d\n{2}\n".format(N, e, d)
#	f.write("\n"+star+text+star+"\n")
#	f.close()
	print(text)
	return N, e, d

def enc(N, e):
	m = 1234567890
	# print(m)
	c = pow(m, e, N)
	# print(c)
#	f = open("text_rsa.txt", "a")
#	f.write("\n" + "-"*80 + "\ncipher text\n" + str(c) + "\n" + "-"*80 + "\n")
#	f.close()
	return c

def dec(N, c, d):
	m = pow(c, d, N)
#	f = open("text_rsa.txt", "a")
#	f.write("\n" + "+"*80 + "\nplane text\n" + str(m) + "\n" + "+"*80 + "\n")
#	f.close()
	# print(m)
	return m

def main():
	start_time = time.time()
#	N, e, d = gen()
	# 2048bit
	N = 15838298573949955295488995961859597016372550830231859026937132934001312427647608926211068977758973830581280906270353167695836039927533358846267130485874647259232371122314519851824230868308096230820173049776726418512454169141732059273710335513515708733943121442559080166661028504603541706400507205762647889875772056608480839274349839900484268345286780323823202086767387073634406457232791864316989394795810857821249705791073869285154746305221704552354724389640144613865174901334338964177889396802804771391056479465489599825043008849833967167050508423115806681180431920221124517399498818739252130160850875123622248718718514795349486467753528577430872958565962824542645231509869613653055152518246548198177054405770971256043954366533565144410675729921776576981377944425873888894807814244575175627487098170563197540793985482853852098063010100938945657720081671573821753267083914760904035578698833142259199536332931662858924350387648810090133631176449944449156514049025479205237552640166926013535292256855485361664451269615804263312947394470468244316232566630072845681283571491954887871718074111796355436149362620075135164018363609227244197042300062014054826591806251643378849730214283667674656561750349330371575083816833835486880354844383
	e = 65537
	d = 1150830489786680609687941144244860170468072799389110161989023407109178781153515017572014441797583554041656769087071757702787299115536473363533943808440042575163107119405248081761249178248671044618546226757965289911901776911560310454573883725458318278087754158863944638198877240931413790772833900145593012368409090034172845211475257299023545262374775285747685861989201477709493012334140330773112951432284836122263623586326712628529027906456898501278868387986425510035948592095367840264508740216594539288710361402179859840500096253153323338716976991789027136057207635443993392310548444006230352988784531903179717539687090359395568986027975946589268062805699564446243580732664656772747669685902211620951131288029840427157153764803980710916903385016360781032833973077224519763453237703722966586602367392061490908735849271929162711917381568299738847178418805101581677357048806298007922398863340020883915743667680197996965606996150958889825752792147143141642761615190484344721436810090000939494550087969838727682144532036200018359347745192907614405551157982279373039489710887411507009814956684166376976762684541886145458251690090918763466616259585064320513051014863437394806136268441248679672341029761343858761312781641142419153731871233

#	2671bit
	# N = 537191214832248993599329709772696797175630217008095882095608481795995664812852889302514068118898050711927846838326711314403044124423514064478276640951641299806087641080657287063256350262994102056639878841142025521306450801362887206893309097152487281334530608002414544320030637292806192552088279266869393866513892828222848623213400134350034176158135934800152169664002839924487529469606794191170144619543095014425966444096857283994420257397383734760016157837594971081070690682265692998306530004672728941341936102608832601113610241963165789961435148015003771355406189305993457665175301889175700090635926842855535026565238747089448117240709393945697701662037706174468238170458692345647980294944470311109868834237000069594384420948644588140668975980129390904374778254351972955953971016498659826216814791680576083523422854527079393386363505221765721694223262675339575826875823035545078578502574449210099050408586207297030038728650917217160073678422471239668765124379716954626211457333001152709398870484946539435222140508854061054980004816326144478300268174700951908014266929679484939148495322033389400098517752079473848112742000566462314686259881503405799780137239222788474742432887927610456067742540012126800798415000218781702059822326302306966668197365886371811439707069339303119280905414876269308303395669904526199589045047701103002449747817179306113168833292080074307246400528263160450042312853425421533439199219545173750271093130852313225898826877660491252300708137144187818719200364162947527694984735176862122975465272680036602868498943086396700322362225471025408348483111588581123372761141687671817566303549
	# d = 254779964457188999619267976392949548295010666268865592004177768888794623638218202819629290009303265487874838080408153680906813258456384754660394476871078421683516519640967246803900043261434696037757867372922434339056844381933299099010707335807112961620477209645529262570754112928151958177770724696768258686739572009393942410475641490699942205128756874153426764875813666682528127294563193064133872548472740930060916962660216594570983793287499864619155320415428910174602442566441316133884094055804239340887306405196916913200395916061783149203828199425520884767995034594171149802503073204773613163819468606382327467395933838530621112168591331492349690415507545676808463113239353863920780192986541506022980194006266279555094846519473270567410985861274728130379499099440352402305831531895384948628976824844092648433438173784723065300624132206595410680274383334995244302954689169113344122770675129995893310706661342813498755502707521237735317158628764372113419427509462353147048349679285445685009333078569404940186533884564976233263243505511748139128674194264522933249524989258574791166617513026050308360844342638867461272973714140247329655106669434310963276136216668968900344520860826901381018718584260005126324555529657923855899241562891088007685661509446571699071336102917973255476582368748985612411388612589664774090832116103431232925825077857524787084603110301391428677285887729068937254976706682145067194989695306125330009991133569218494437827955969232452192104031185537840983106613807041949750822719813364777474615075662518743916814204591263056832005047917938457641732897595717705161080162319235522867144853

	# 3241bit
	# N = 145079674110699667613519295789838000395606034271855522050582737924342764076120911387266466600195486246395624483396918918781227135018625356504068184016157758310000443164125921073954328404758706590878415388429071537537026684410944013895502869160468738049793015383125013070610911723911688555398189643667937985181987528893179293515236536283645798836063862792393184730980685251597714029763285067845656432850893583527989990455744479590160848674216811823423423740131264506357435873463386377674881281299178756139992810158957913836454016853953407501011384260060205800668398661798633934242675599256156644058491205042722555518204659284423617659964922268543405507403932593878482041164466510608546293620760271550378096739791028360407536008577621292511946562606695079115011825352894046486655966223399894114225341039111736214306145333752647192583720385962945032953045884760574729138028223518256395353256289886214044029531636380692564609224197331344632571644688381957399139236236618875982927681297327242458930523996615799216849862853449423782421821749895050997400816555433859881228930593281774389334351607354009803214580124212832838915774682576712919176578154265295143382500781232256045632202444942603367241052290365676522104697647908606606566497018104489169088753838793455612153690860034593876300515765877391126480284765385682832403277689681481538482952990853860106670914928109844547796949175331349966102941811659697528629632789146818740163367957166758589877573047742371309417224820110226471033901828561181000758936792015516350021685498056099242295317263492584862154737163294719564062661053796129607487816670434600390688541043574214507859223685645372669633701373669592002934496356395234300517114796587005559079383148533983469418668312530544089350881953030622580535385385955829512620547224961966016791539890188440730072886701643359118011133203084532933988701139252161810782910069660653959572389771357157172164005518646457698657673315893327123531264287872251397004623
	# d = 62233927068283561280175594893567232328633786128212678203274982243115310839250914473201736050342489049619607108987863063058984061625930613964613407041003449339595075433313578881426950187573149799187709108059668403112416362952910097542522119729439211938200269183297885048965997242692361572209733516218880030782935065684635388842849760357387954021060826322269093830081633344189794078440197645793138826872410566759576767347946115243575261894475750046415043587688027207031548510164886724073026495890318634837780457939771180122438191797231978044096205894427156654625489289701161111942327831940557726695093813378184219651239568281474604624480733932519962143974346659317725340239203000026520316043768154082362321034617775917361750763830243486830162407717198204970632275602269104915991869912239516963443810559417554056377140604052492035416728431429212104786746096987564846731729976162606497742742177358913826079958235707621802475839905085311986442569039237102222591838935564131109266884718533459678278558379827286059803578333305706808421676900867613259583790293900602208145334949612372165249682724870260467928973110192683896794757468534680711865099443110866903381351013019347206847758804710524351408399966545471425874700258562912441296729784863362115181436788080656693621118832997302775314871351600910335288658875606811707389752739925240731253645558340783432167183392974644617615515898194827146909178100182878182197193262682735093627950255243122327896707102248183819309247018732770698095316901511857936756024871792123308013428504509868758342040955937314933872624826663763686682226975109633241031782507888559590317397587576235287183000178907547891054469935032931152316641914526845404742677796928123900982231737780114431665519703952657170158321235818957873839015006841770483215668150912975978877733755694651745721658803534580540639837622989264309516592460615741747471358307574380244281083968400376631895005283905357648078305183096374891086316568324625192624073

	c = enc(N, e)
	m = dec(N, c, d)
	exec_time = time.time() - start_time
	print("{0}".format(exec_time))


if __name__ == "__main__":
	main()
